"""
【Python】Python多进程详解:https://zhuanlan.zhihu.com/p/493699150， https://www.cnblogs.com/lj-C/p/14893317.html
多进程
作用：多进程可以充分利用多核CPU的计算能力，实现真正的并行计算。
定义：进程是操作系统分配资源的基本单位。每个进程都有自己的内存空间，这意味着进程之间的变量是隔离的，一个进程无法访问另一个进程的变量。
使用场景：
1.多任务处理 -> 在处理多个任务时，可以使用进程来实现并发执行。比如，在一个 Web 服务器中，可以使用进程来处理多个客户端的请求。每个客户端连接到服务器时，服务器可以创建一个进程来处理该客户端的请求，从而实现并发处理多个客户端的请求。
2.计算密集型任务 -> 在进行计算密集型任务时，可以使用进程来充分利用多核 CPU 的性能。比如，在进行图像处理、数据分析等任务时，可以将任务分成多个子任务，并使用进程来并发执行这些子任务，从而加速任务的执行。
3.资源隔离 -> 在进行一些需要资源隔离的任务时，可以使用进程来隔离不同的资源。比如，在进行网络爬虫时，可以将每个网站的爬虫放在一个进程中，从而避免不同的爬虫之间互相干扰。
进程与线程的选择：
在选择进程或线程时，需要根据具体的场景来进行选择。一般来说，进程适合处理 CPU 密集型任务，线程适合处理 I/O 密集型任务。
1.如果需要充分利用多核CPU的性能，可以选择使用进程来实现任务的并发执行。
2.如果需要处理大量的 I/O 操作，可以选择使用线程来实现任务的并发执行。
3.如果需要处理大量的 I/O 操作，可以选择使用线程来实现任务的并发执行。
4.如果需要共享数据，可以选择使用线程来实现数据的共享和同步。
"""

"""
multiprocessing的基本方法：
1.start:进程启动
2.join:join()方法就是让主进程进入阻塞状态，等对应的子进程执行完毕再执行下一行，主要用于进程同步。
3.pool:如果想一次性创建多个进程，可以用Pool方法（注意Pool是一个方法，不是类）
4.进程间的通信:现在设想你需要两个进程，一个进程（接收进程）产生数据（比如从网站上爬虫，或者从websocket接收数据等），另一个进程（转发进程）对产生的数据进行处理并转发（比如计算并处理之后上传数据库，或者发送给websocket等）
方法：Queue和Pipe
"""